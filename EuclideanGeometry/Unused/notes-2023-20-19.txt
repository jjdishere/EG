/-
Toy tactics: LinearOrder
  ⬝ Only treat the type of goal showing that a point C lies on/in a nondegenerate segment or its extensions.
  ⬝ Always (1) starts with the two endpoints of the nondegenerate segments, (2) try to include more points on the line (by studying the known hypothesis), (3) read all information regarding the orders of the points on the line, and complete that into a poset, and (4) try to achieve the goal.

Structure of Tactic: LinearOrder

Input: 
  ⬝ goal (check that it is of the form C LiesOn/LiesIn SEG_nd A B h, or extensions)
  ⬝ get all known hypotheses including, LiesOn/LiesIn, extension, collinear, ¬ ▵.IsND, points being equal, and etc. (Each such statement may also provide certain information regarding point positions)

Additional concepts/theorems to be established:
  ⬝ Given  RAY A B h, and two points C D such that C D LiesOn LIN A B h,  whether C < D for the direction or now, and related compatibility theorems, and conversion theorems to LiesOn/LiesIn etc.

Data set to maintain:
  ⬝ list of points being equal,  `EQ`
  ⬝ list of all known collinearity statement from input `COL`, recorded in the form of liest of three points
  ⬝ list of points that are known to be on LIN A B, and their proof(!) in Expr form (in the form of ? LiesOn LIN A B)  `LIESON`
  ⬝ poset of the list of known points on LIN A B, and the proof of each inequalities Expr (in the form of C < D for RAY A B h) `PSET`

Preparation:
  ⬝ For each member X=Y in `EQ`, replace any apperance of Y in `COL` by X.
  ⬝ `LIESON` = [A, B]
  ⬝ `PSET` = [A < B] (or whatever appropriate form)

Programming part:  
  ⬝ Lemma `Complete_PSet`: Given `LIESON`, `PSET`, `NewRelation`, inductively, for each `NewRelation`, put in the relations that may be derived from this new relation (and the proofs!)

  ⬝ Run a loop through the list `COL`.
    ⬝ If for some member [X, Y, Z] (which might come with some newrelations), two of the points already belongs to `LIESON`, and if X ≠ Y in `PSET`, then include Z into `PSET`, and call `Lemma: Complete_PSet` to complete the relation.  *And remove the condition [X, Y, Z] from `COL`, and start from the very beginning of `COL`.
    ⬝ If nothing changes, exit the loop.

Finishing:
  ⬝ Check whether `PSET` can prove the goal.

-/



/- 
More sophisticated tactic:


Step 1: Get information
  ⬝ get all possible points (only get those points of the form A : P)
  ⬝ get all collinearity conditions, in the following forms
    ⬝ 



Step 2: Main lemmas
  ⬝ 